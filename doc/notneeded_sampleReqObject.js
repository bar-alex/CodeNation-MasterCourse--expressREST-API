IncomingMessage = {
    _readableState: { // ReadableState 
        objectMode: false,
        highWaterMark: 16384,
        buffer: { // BufferList 
            head: null,
            tail: null,
            length: 0
        },
        length: 0,
        pipes: [],
        flowing: null,
        ended: true,
        endEmitted: false,
        reading: false,
        constructed: true,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: true,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: null
    },
    _events:  { // [Object: null prototype]
        end: [clearRequestTimeout]  // Function: 
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: < ref * 1 > Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList {
                head: null,
                tail: null,
                length: 0
            },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
            end: [Array],
            timeout: [Function: socketOnTimeout],
            data: [Function: bound socketOnData],
            error: [Function: socketOnError],
            close: [Array],
            drain: [Function: bound socketOnDrain],
            resume: [Function: onSocketResume],
            pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: Server {
            maxHeaderSize: undefined,
            insecureHTTPParser: undefined,
            _events: [Object: null prototype],
            _eventsCount: 2,
            _maxListeners: undefined,
            _connections: 1,
            _handle: [TCP],
            _usingWorkers: false,
            _workers: [],
            _unref: false,
            allowHalfOpen: true,
            pauseOnConnect: false,
            httpAllowHalfOpen: false,
            timeout: 0,
            keepAliveTimeout: 5000,
            maxHeadersCount: null,
            maxRequestsPerSocket: 0,
            headersTimeout: 60000,
            requestTimeout: 0,
            _connectionKey: '6::::5001',
            [Symbol(IncomingMessage)]: [Function: IncomingMessage],
            [Symbol(ServerResponse)]: [Function: ServerResponse],
            [Symbol(kCapture)]: false,
            [Symbol(async_id_symbol)]: 14
        },
        _server: Server {
            maxHeaderSize: undefined,
            insecureHTTPParser: undefined,
            _events: [Object: null prototype],
            _eventsCount: 2,
            _maxListeners: undefined,
            _connections: 1,
            _handle: [TCP],
            _usingWorkers: false,
            _workers: [],
            _unref: false,
            allowHalfOpen: true,
            pauseOnConnect: false,
            httpAllowHalfOpen: false,
            timeout: 0,
            keepAliveTimeout: 5000,
            maxHeadersCount: null,
            maxRequestsPerSocket: 0,
            headersTimeout: 60000,
            requestTimeout: 0,
            _connectionKey: '6::::5001',
            [Symbol(IncomingMessage)]: [Function: IncomingMessage],
            [Symbol(ServerResponse)]: [Function: ServerResponse],
            [Symbol(kCapture)]: false,
            [Symbol(async_id_symbol)]: 14
        },
        parser: HTTPParser {
            '0': [Function: bound setRequestTimeout],
            '1': [Function: parserOnHeaders],
            '2': [Function: parserOnHeadersComplete],
            '3': [Function: parserOnBody],
            '4': [Function: parserOnMessageComplete],
            '5': [Function: bound onParserExecute],
            '6': [Function: bound onParserTimeout],
            _headers: [],
            _url: '',
            socket: [Circular * 1],
            incoming: [Circular * 2],
            outgoing: null,
            maxHeaderPairs: 2000,
            _consumed: true,
            onIncoming: [Function: bound parserOnIncoming],
            [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        setEncoding: [Function: socketSetEncoding],
        _paused: false,
        _httpMessage: ServerResponse {
            _events: [Object: null prototype],
            _eventsCount: 1,
            _maxListeners: undefined,
            outputData: [],
            outputSize: 0,
            writable: true,
            destroyed: false,
            _last: false,
            chunkedEncoding: false,
            shouldKeepAlive: true,
            maxRequestsOnConnectionReached: false,
            _defaultKeepAlive: true,
            useChunkedEncodingByDefault: true,
            sendDate: true,
            _removedConnection: false,
            _removedContLen: false,
            _removedTE: false,
            _contentLength: null,
            _hasBody: true,
            _trailer: '',
            finished: false,
            _headerSent: false,
            _closed: false,
            socket: [Circular * 1],
            _header: null,
            _keepAliveTimeout: 5000,
            _onPendingData: [Function: bound updateOutgoingData],
            req: [Circular * 2],
            _sent100: false,
            _expect_continue: false,
            locals: [Object: null prototype] {},
            [Symbol(kCapture)]: false,
            [Symbol(kNeedDrain)]: false,
            [Symbol(corked)]: 0,
            [Symbol(kOutHeaders)]: [Object: null prototype]
        },
        [Symbol(async_id_symbol)]: 152,
        [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            _consumed: true,
            [Symbol(owner_symbol)]: [Circular * 1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    rawHeaders: [
        'Host',
        'localhost:5001',
        'User-Agent',
        'insomnia/2022.4.1',
        'Authorization',
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYyYjFhMjNiM2Y1MzY0YjYzYzI1ZmNlOSIsImlhdCI6MTY1NTgwODU3MX0.2tDkLPc-0MD-h_c5ODBuPQhquw_d-biBaHq1Qj7Cs5Q',
        'Accept',
        '*/*'
    ],
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/users?admin=true',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: < ref * 1 > Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: BufferList {
                head: null,
                tail: null,
                length: 0
            },
            length: 0,
            pipes: [],
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: true,
            constructed: true,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            resumeScheduled: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            destroyed: false,
            errored: null,
            closed: false,
            closeEmitted: false,
            defaultEncoding: 'utf8',
            awaitDrainWriters: null,
            multiAwaitDrain: false,
            readingMore: false,
            dataEmitted: false,
            decoder: null,
            encoding: null,
            [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
            end: [Array],
            timeout: [Function: socketOnTimeout],
            data: [Function: bound socketOnData],
            error: [Function: socketOnError],
            close: [Array],
            drain: [Function: bound socketOnDrain],
            resume: [Function: onSocketResume],
            pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            finalCalled: false,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            destroyed: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: true,
            bufferProcessing: false,
            onwrite: [Function: bound onwrite],
            writecb: null,
            writelen: 0,
            afterWriteTickInfo: null,
            buffered: [],
            bufferedIndex: 0,
            allBuffers: true,
            allNoop: true,
            pendingcb: 0,
            constructed: true,
            prefinished: false,
            errorEmitted: false,
            emitClose: false,
            autoDestroy: true,
            errored: null,
            closed: false,
            closeEmitted: false,
            [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: Server {
            maxHeaderSize: undefined,
            insecureHTTPParser: undefined,
            _events: [Object: null prototype],
            _eventsCount: 2,
            _maxListeners: undefined,
            _connections: 1,
            _handle: [TCP],
            _usingWorkers: false,
            _workers: [],
            _unref: false,
            allowHalfOpen: true,
            pauseOnConnect: false,
            httpAllowHalfOpen: false,
            timeout: 0,
            keepAliveTimeout: 5000,
            maxHeadersCount: null,
            maxRequestsPerSocket: 0,
            headersTimeout: 60000,
            requestTimeout: 0,
            _connectionKey: '6::::5001',
            [Symbol(IncomingMessage)]: [Function: IncomingMessage],
            [Symbol(ServerResponse)]: [Function: ServerResponse],
            [Symbol(kCapture)]: false,
            [Symbol(async_id_symbol)]: 14
        },
        _server: Server {
            maxHeaderSize: undefined,
            insecureHTTPParser: undefined,
            _events: [Object: null prototype],
            _eventsCount: 2,
            _maxListeners: undefined,
            _connections: 1,
            _handle: [TCP],
            _usingWorkers: false,
            _workers: [],
            _unref: false,
            allowHalfOpen: true,
            pauseOnConnect: false,
            httpAllowHalfOpen: false,
            timeout: 0,
            keepAliveTimeout: 5000,
            maxHeadersCount: null,
            maxRequestsPerSocket: 0,
            headersTimeout: 60000,
            requestTimeout: 0,
            _connectionKey: '6::::5001',
            [Symbol(IncomingMessage)]: [Function: IncomingMessage],
            [Symbol(ServerResponse)]: [Function: ServerResponse],
            [Symbol(kCapture)]: false,
            [Symbol(async_id_symbol)]: 14
        },
        parser: HTTPParser {
            '0': [Function: bound setRequestTimeout],
            '1': [Function: parserOnHeaders],
            '2': [Function: parserOnHeadersComplete],
            '3': [Function: parserOnBody],
            '4': [Function: parserOnMessageComplete],
            '5': [Function: bound onParserExecute],
            '6': [Function: bound onParserTimeout],
            _headers: [],
            _url: '',
            socket: [Circular * 1],
            incoming: [Circular * 2],
            outgoing: null,
            maxHeaderPairs: 2000,
            _consumed: true,
            onIncoming: [Function: bound parserOnIncoming],
            [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        setEncoding: [Function: socketSetEncoding],
        _paused: false,
        _httpMessage: ServerResponse {
            _events: [Object: null prototype],
            _eventsCount: 1,
            _maxListeners: undefined,
            outputData: [],
            outputSize: 0,
            writable: true,
            destroyed: false,
            _last: false,
            chunkedEncoding: false,
            shouldKeepAlive: true,
            maxRequestsOnConnectionReached: false,
            _defaultKeepAlive: true,
            useChunkedEncodingByDefault: true,
            sendDate: true,
            _removedConnection: false,
            _removedContLen: false,
            _removedTE: false,
            _contentLength: null,
            _hasBody: true,
            _trailer: '',
            finished: false,
            _headerSent: false,
            _closed: false,
            socket: [Circular * 1],
            _header: null,
            _keepAliveTimeout: 5000,
            _onPendingData: [Function: bound updateOutgoingData],
            req: [Circular * 2],
            _sent100: false,
            _expect_continue: false,
            locals: [Object: null prototype] {},
            [Symbol(kCapture)]: false,
            [Symbol(kNeedDrain)]: false,
            [Symbol(corked)]: 0,
            [Symbol(kOutHeaders)]: [Object: null prototype]
        },
        [Symbol(async_id_symbol)]: 152,
        [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            _consumed: true,
            [Symbol(owner_symbol)]: [Circular * 1]
        },
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/users?admin=true',
    _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: '?admin=true',
        query: 'admin=true',
        pathname: '/users',
        path: '/users?admin=true',
        href: '/users?admin=true',
        _raw: '/users?admin=true'
    },
    params: {},
    query: {
        admin: 'true'
    },
    res: < ref * 3 > ServerResponse {
        _events: [Object: null prototype] {
            finish: [Function: bound resOnFinish]
        },
        _eventsCount: 1,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        _closed: false,
        socket: < ref * 1 > Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: null,
            _readableState: [ReadableState],
            _events: [Object: null prototype],
            _eventsCount: 8,
            _maxListeners: undefined,
            _writableState: [WritableState],
            allowHalfOpen: true,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: [Server],
            _server: [Server],
            parser: [HTTPParser],
            on: [Function: socketListenerWrap],
            addListener: [Function: socketListenerWrap],
            prependListener: [Function: socketListenerWrap],
            setEncoding: [Function: socketSetEncoding],
            _paused: false,
            _httpMessage: [Circular * 3],
            [Symbol(async_id_symbol)]: 152,
            [Symbol(kHandle)]: [TCP],
            [Symbol(kSetNoDelay)]: false,
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: null,
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(kCapture)]: false,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(RequestTimeout)]: undefined
        },
        _header: null,
        _keepAliveTimeout: 5000,
        _onPendingData: [Function: bound updateOutgoingData],
        req: [Circular * 2],
        _sent100: false,
        _expect_continue: false,
        locals: [Object: null prototype] {},
        [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
            'x-powered-by': [Array],
            'access-control-allow-origin': [Array]
        }
    },
    body: {},
    route: Route {
        path: '/users',
        stack: [
            [Layer],
            [Layer]
        ],
        methods: {
            get: true
        }
    },
    user: {
        _id: new ObjectId("62b1a23b3f5364b63c25fce9"),
        username: 'jayq',
        email: 'jayq@email.com',
        password: '$2a$08$qzEJv0SGzwVDG.sznSzt3OYoX2PtafIaAU0DAArq9V7kkBAnB3NRa',
        is_disabled: false,
        is_pending: true,
        is_admin: false,
        __v: 0
    },
    [Symbol(kCapture)]: false,
    [Symbol(kHeaders)]: {
        host: 'localhost:5001',
        'user-agent': 'insomnia/2022.4.1',
        authorization: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYyYjFhMjNiM2Y1MzY0YjYzYzI1ZmNlOSIsImlhdCI6MTY1NTgwODU3MX0.2tDkLPc-0MD-h_c5ODBuPQhquw_d-biBaHq1Qj7Cs5Q',
        accept: '*/*'
    },
    [Symbol(kHeadersCount)]: 8,
    [Symbol(kTrailers)]: null,
    [Symbol(kTrailersCount)]: 0,
    [Symbol(RequestTimeout)]: undefined
}