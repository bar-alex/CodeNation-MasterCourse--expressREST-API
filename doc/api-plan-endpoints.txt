username:   String, required, unique
email:      String, required, unique
password:   String, required  // hash

is_disabled:Boolean, default: false // won't be allowed to login
//is_pending: Boolean, default: true  // limited "functionality" until approved by an admin
is_admin:   Boolean, default: false // will have full admin powers



GET     /api-help                                                       -> returns a webpage that describes the API entry points and usage

POST    /user               -< user info                                -> adds user to list of users with pending:true // returns token for authentication
POST    /login              -< {username, password}                     -> token for authentication on operations

GET     /user/list          -< admin token or self token not pending    -> list of all non admin users
GET     /user/admin         -< requires admin token                     -> return list of admins
//GET     /user/pending       -< requires admin token                     -> return list of pending users

PUT     /user?id=*user-name*  -< user info to change, self/admin token    -> updates user info (just pass, email))
//            &approve        -< admin token                              -> adding the 'approve' parameter will switch 'pending' to false
            &elevate        -< admin token                              -> adding the 'elevate' parameter will switch 'admin' to true
            &disable        -< admin token                              -> will disable the user (user won't be able to login)
            &enable         -< admin token                              -> will enable the user (user will be able to login)
DELETE  /user?id=*user-name*  -< requires admin token                     -> deletes user in database // or marks ad deleted



- POST /user with {username, password, email}   will allow to add a user without requiring any credentials - user will be added to the database with a pending flag (not yet approved)
- POST /login with a {username, password}       will login a user and a successful login will receive an authentication token

- Logged in users will be known by transmitting the token in the 'Authorization' header

- GET /user/list    from a logged in (token in 'Authorization' header) and not pending user will return a list of all non admin and non pending users
- GET /user/admin   from a logged in user with admin flag on will return a list of all admin users
- GET /user/pending from a logged in user with admin flag on will return a list of all pending users

- PUT /user?id=*user-id* with {confirm_password, new_password, new_email}   by the logged in self user allow him to change his details
- PUT /user?id=*user-id* with {new_password, new_email}                     by the logged in admin will allow him to change the users details
- PUT /user?id=*user-id*&approve    by the logged in admin will approve the user by setting 'pending' to false
- PUT /user?id=*user-id*&elevate    by the logged in admin will elevate the user to admin by setting 'admin' to true
